<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Aws on Fartash</title>
    <link>http://fartashh.github.io/categories/aws/</link>
    <description>Recent content in Aws on Fartash</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 31 Aug 2016 10:11:33 +0800</lastBuildDate>
    <atom:link href="http://fartashh.github.io/categories/aws/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Architecting Serverless Push Notification System in AWS</title>
      <link>http://fartashh.github.io/post/architecting-serverless-push-notification/</link>
      <pubDate>Wed, 31 Aug 2016 10:11:33 +0800</pubDate>
      
      <guid>http://fartashh.github.io/post/architecting-serverless-push-notification/</guid>
      <description>

&lt;p&gt;
&lt;figure class=&#34;align-center&#34;&gt;
    
        &lt;img src=&#34;http://fartashh.github.io/images/post/lambda_sns/aws_sns_lambda.png&#34;  /&gt;
    
    
&lt;/figure&gt;

One of the best approaches to increase and keep customer engagement with your app is push notification and as you may know
there are many services such SNS, Firebase, Pushwoosh, Urban Airship, carnival and etc., to address this need.&lt;/p&gt;

&lt;p&gt;Recently at Mindvalley we have decided to use one of the available solutions to send push notifications to our web and mobile users.
The new service should support following requirements;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Integrable with our user management system&lt;/li&gt;
&lt;li&gt;Authentication and Authorization with Auth0&lt;/li&gt;
&lt;li&gt;Send notification to &lt;strong&gt;user&lt;/strong&gt; (multiple devices, multiple platform) not only single device&lt;/li&gt;
&lt;li&gt;Schedule notification&lt;/li&gt;
&lt;li&gt;Flexible user segmentation&lt;/li&gt;
&lt;li&gt;Comprehensive API to manage notification system&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;proposed-solution:0fdc538f711f0b73c4e8cac8919e8b3b&#34;&gt;Proposed Solution&lt;/h2&gt;

&lt;p&gt;After doing some research and comparing aforementioned solutions I came up with the idea of using server less approach.
The proposed system used AWS SNS, RDS, Lambda, and API Gateway to fulfill all requirements.&lt;/p&gt;


&lt;figure class=&#34;align-center&#34;&gt;
    
        &lt;img src=&#34;http://fartashh.github.io/images/post/lambda_sns/sns_architecture.png&#34;  /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;you can find all lambdas of the system &lt;a href=&#34;https://github.com/fartashh/userbase-sns-lambda&#34;&gt;here&lt;/a&gt;
lets look at each step of implementing the solution;&lt;/p&gt;

&lt;h3 id=&#34;step-1-design-database:0fdc538f711f0b73c4e8cac8919e8b3b&#34;&gt;Step 1: Design Database&lt;/h3&gt;

&lt;p&gt;I have decided to use RDS (postgresql) to store the system data. System&amp;rsquo;s DB contains 4 tables;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;users_endpoints&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;internal_user_id&lt;/em&gt; : connects the system with user management system.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;arn&lt;/em&gt; : Amazon Resource Name you get this value after registering the device in SNS.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;token&lt;/em&gt; : user device token.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;app_name&lt;/em&gt; : application name.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;user_data&lt;/em&gt; : it is a dictionary, you can store any data for user and query them later based on given attributes.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;timezone&lt;/em&gt; : to send notification in user timezone.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;topics&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;stores topics which user may want to subscribe to them.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;subscriptions&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;stores user&amp;rsquo;s subscription information&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;notification&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;stores scheduled notifications&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;figure class=&#34;align-center&#34;&gt;
    
        &lt;img src=&#34;http://fartashh.github.io/images/post/lambda_sns/aws_sns_lambda_erd.png&#34;  /&gt;
    
    
&lt;/figure&gt;


&lt;h3 id=&#34;step-2-implement-lambdas:0fdc538f711f0b73c4e8cac8919e8b3b&#34;&gt;Step 2: Implement Lambdas&lt;/h3&gt;

&lt;p&gt;Before you start uploading and deploying lambdas I suggest to
read &lt;a href=&#34;https://getpocket.com/a/read/1215426880&#34;&gt;&lt;em&gt;Configure your Lambda functions like a champ and let your code sail smoothly to Production&lt;/em&gt;&lt;/a&gt;
post. It explains how setup your lambdas properly in &lt;em&gt;test&lt;/em&gt;, &lt;em&gt;stg&lt;/em&gt;, and &lt;em&gt;production&lt;/em&gt; environments.&lt;/p&gt;

&lt;h4 id=&#34;step-2-1-lambdas-configuration:0fdc538f711f0b73c4e8cac8919e8b3b&#34;&gt;Step 2.1: Lambdas Configuration&lt;/h4&gt;

&lt;p&gt;We can store our configuration in AWS S3 ,dynamo db or in deployment package. configuration contains information
about list of applications setup on SNS and RDS configuration for each environment.&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;$LATEST&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;APPLICATIONS&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
      &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;appname-ios-dev&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;arn:aws:sns:us-east-1:xxxxxxxxxx:app/APNS_SANDBOX/ios-dev&amp;quot;&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;},&lt;/span&gt;
    &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;DATABASE&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
      &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;host&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;dev-sns-lambda.xxxxxxxxxx.us-east-1.rds.amazonaws.com&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt;
      &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;port&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;5432&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt;
      &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;db&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;xxxxxxxxxx&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt;
      &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;tables&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;users_endpoints&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;users_endpoints&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt;
        &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;topics&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;topics&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt;
        &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;subscriptions&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;subscriptions&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt;
        &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;notifications&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;notifications&amp;quot;&lt;/span&gt;
      &lt;span style=&#34;color: #f8f8f2&#34;&gt;},&lt;/span&gt;
      &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;user&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;xxxxxxxxxx&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt;
      &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;password&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;xxxxxxxxxxxxxxxxxx&amp;quot;&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;},&lt;/span&gt;
  &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;DEV&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;},&lt;/span&gt;
  &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;TEST&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;},&lt;/span&gt;
  &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;PROD&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4 id=&#34;step-2-2-lambdas:0fdc538f711f0b73c4e8cac8919e8b3b&#34;&gt;Step 2.2: Lambdas&lt;/h4&gt;

&lt;p&gt;As mentioned earlier, we need to implement 9 lambdas for user, device, subscription, and notification management. you can add
or update any of given function to support your requirements.
&lt;a href=&#34;https://github.com/fartashh/userbase-sns-lambda&#34;&gt;you can download all lambdas from here&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;step-3-api-gateway:0fdc538f711f0b73c4e8cac8919e8b3b&#34;&gt;Step 3: API Gateway&lt;/h3&gt;

&lt;p&gt;After deploying and testing all lambdas now it is time to add API gateway as a trigger.
After creating the API in &lt;a href=&#34;https://aws.amazon.com/api-gateway/&#34;&gt;API Gateway&lt;/a&gt; console, we need to add four resources and for
each resource we need to add corespondent method;&lt;/p&gt;

&lt;p&gt;
&lt;figure class=&#34;align-center&#34;&gt;
    
        &lt;img src=&#34;http://fartashh.github.io/images/post/lambda_sns/api_gateway.png&#34;  /&gt;
    
    
&lt;/figure&gt;
&lt;/p&gt;

&lt;h3 id=&#34;step-4-send-scheduled-notification:0fdc538f711f0b73c4e8cac8919e8b3b&#34;&gt;Step 4: Send Scheduled notification&lt;/h3&gt;

&lt;p&gt;You may figure it out by now that there is one lambda &lt;code&gt;handel_notification_cron&lt;/code&gt; which is not connected to any end point.
For this lambda we need to add &lt;code&gt;CloudWatch Events - Schedule&lt;/code&gt; trigger. This trigger enable us to have a cron job and call lambdas every few
minutes to send scheduled notifications.&lt;/p&gt;

&lt;h3 id=&#34;step-5-security:0fdc538f711f0b73c4e8cac8919e8b3b&#34;&gt;Step 5: Security&lt;/h3&gt;

&lt;p&gt;There are three techniques to secure your APIs. The simplest way is using &lt;em&gt;api-key&lt;/em&gt; you can simply add new api-key in API Gateway
console and enforce APIs to use it. The second method is adding &lt;em&gt;Authorizers&lt;/em&gt;, it allows developers to authorize their APIs
using bearer token authorization strategies, such as OAuth using an AWS Lambda function. And third method is using AWS_IAM role
which is explained in detail on &lt;a href=&#34;https://auth0.com/docs/integrations/aws-api-gateway&#34;&gt;this tutorial&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;conclusion:0fdc538f711f0b73c4e8cac8919e8b3b&#34;&gt;conclusion&lt;/h2&gt;

&lt;p&gt;AWS Lambdas makes you able to build and run applications on the AWS cloud quickly and easily. On the other hand, existence of
many great services in different domains help developers to solve complex problems in short amount of time.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Serverless Approach to Transcode Media</title>
      <link>http://fartashh.github.io/post/serverless-approach-to-transcode-media/</link>
      <pubDate>Tue, 24 May 2016 16:21:57 +0800</pubDate>
      
      <guid>http://fartashh.github.io/post/serverless-approach-to-transcode-media/</guid>
      <description>

&lt;p&gt;
&lt;figure class=&#34;align-center&#34;&gt;
    
        &lt;img src=&#34;http://fartashh.github.io/images/post/lambda-transcoder/s3-lambda-transcoder.png&#34;  /&gt;
    
    
&lt;/figure&gt;

Handling and managing media content is quite challenging. You need to decode the media to different formats and qualities,
to serve users with different devices and bandwidth.
And I am pretty sure you don&amp;rsquo;t want to handle this complexity in your app :).
In this post I am going to explain how to setup the fully automated serverless approach by using AWS S3, Lambda, and Elastic Transcoder.&lt;/p&gt;

&lt;h2 id=&#34;case-study:969e4744411803acac2ecc623876bfcd&#34;&gt;Case Study&lt;/h2&gt;

&lt;p&gt;I always understand and learn any new concept better by using case studies; so I have decided to have one.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Build feature to support streaming for IOS devices&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;As you may know Apple use HTTP Live Streaming (HLS) which is an adaptive streaming communications protocol created by
Apple to communicate with iOS and Apple TV devices and Macs running OSX in Snow Leopard or later.&lt;/p&gt;

&lt;p&gt;The final system, automatically detects the *.mp3 file uploaded to &lt;code&gt;input&lt;/code&gt; bucket, call lambda function, to create a new
Transcoder job (convert mp3 to hls) and save the output in &lt;code&gt;output&lt;/code&gt; bucket.&lt;/p&gt;

&lt;h2 id=&#34;setup-elastic-transcoder:969e4744411803acac2ecc623876bfcd&#34;&gt;Setup Elastic Transcoder&lt;/h2&gt;

&lt;p&gt;Amazon Elastic Transcoder is media transcoding in cloud. It helps us to convert media files, which have been stored in S3, into
the formats required by consumer playback devices. In our case, we want to convert mp3 to the format supported
by HLS protocol.&lt;/p&gt;

&lt;p&gt;In order to get it up and running, you need to be familiar with three components of ET:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Pipelines&lt;/strong&gt; are queues that manage your transcoding jobs. When you create a job, you specify which pipeline you
want to add the job to. Elastic Transcoder starts processing the jobs in a pipeline in the order in which you added them.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Presets&lt;/strong&gt; are templates that contain most of the settings for transcoding media files from one format to another.
Elastic Transcoder includes some default presets for common formats, for example, several iPod and iPhone versions.
You can also create your own presets for formats that aren&amp;rsquo;t included among the default presets. You specify which
preset you want to use when you create a job.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Jobs&lt;/strong&gt; do the work of transcoding. Each job converts one file into up to 30 formats. For example, if you want to
convert a media file into six different formats, you can create files in all six formats by creating a single job.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;setup-pipeline:969e4744411803acac2ecc623876bfcd&#34;&gt;Setup Pipeline&lt;/h4&gt;

&lt;p&gt;In order to run transcoder job, first we need to create new pipeline.

&lt;figure class=&#34;align-center&#34;&gt;
    
        &lt;img src=&#34;http://fartashh.github.io/images/post/lambda-transcoder/pipeline.png&#34;  /&gt;
    
    
&lt;/figure&gt;

To create a pipeline, you need to specify the input, output, and thumbnails buckets. Also you can set some additional options;
such as storage class and permission for each bucket.
I add &lt;code&gt;Open/Download&lt;/code&gt; permission for All users, to &lt;code&gt;output&lt;/code&gt; bucket. you can manage bucket accessibility based on your strategy.&lt;/p&gt;

&lt;p&gt;After creating pipeline, you can create a new job to convert your media, However, we want to do it automatically ;).&lt;/p&gt;

&lt;h4 id=&#34;understanding-presets:969e4744411803acac2ecc623876bfcd&#34;&gt;Understanding Presets&lt;/h4&gt;

&lt;p&gt;As explained before &lt;strong&gt;Presets&lt;/strong&gt; are pre configured template you can use for transcoding media files from one format to another.
For instance to prepare your media for HLS protocol there are 13 different presets available and we are going to use one.
I have decided to use &lt;code&gt;System preset: HLS Audio - 160k&lt;/code&gt; but you can choose any other or create your own preset.&lt;/p&gt;

&lt;h2 id=&#34;create-your-lambda-function:969e4744411803acac2ecc623876bfcd&#34;&gt;Create Your Lambda function&lt;/h2&gt;

&lt;p&gt;Let&amp;rsquo;s create our lambda function. Select &lt;code&gt;S3-get-object&lt;/code&gt; blueprint.
Configure event source by selecting &lt;code&gt;S3&lt;/code&gt; as event source type, &lt;code&gt;input&lt;/code&gt; as Bucket, and for event type select
&lt;code&gt;Object Created &amp;gt; Put&lt;/code&gt;.

&lt;figure class=&#34;align-center&#34;&gt;
    
        &lt;img src=&#34;http://fartashh.github.io/images/post/lambda-transcoder/lambda-event.png&#34;  /&gt;
    
    
&lt;/figure&gt;

click next and replace the code with following codes:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;   
   &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;use strict&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;
   &lt;span style=&#34;color: #a6e22e&#34;&gt;console&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;log&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;Loading function&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
   
   &lt;span style=&#34;color: #66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;aws&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;require&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;aws-sdk&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
   &lt;span style=&#34;color: #66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;s3&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;aws&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;S3&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;({&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;apiVersion&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;2006-03-01&amp;#39;&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;});&lt;/span&gt;
   &lt;span style=&#34;color: #66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;elastictranscoder&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;aws&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;ElasticTranscoder&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;();&lt;/span&gt;
   
   &lt;span style=&#34;color: #66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;getFileName&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;path&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
      &lt;span style=&#34;color: #66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;path&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;split&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;).&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;reverse&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;()[&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;].&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;split&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;.&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)[&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;];&lt;/span&gt;
   &lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
   
   &lt;span style=&#34;color: #a6e22e&#34;&gt;exports&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;handler&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;event&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;context&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;callback&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
   
       &lt;span style=&#34;color: #66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;bucket&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;event&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;Records&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;].&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;s3&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;bucket&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;
       &lt;span style=&#34;color: #66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;key&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;decodeURIComponent(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;event&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;Records&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;].&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;s3&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;object&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;key&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;replace&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;/\+/g&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39; &amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;));&lt;/span&gt;

       &lt;span style=&#34;color: #66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;params&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
         &lt;span style=&#34;color: #a6e22e&#34;&gt;Input&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt; 
           &lt;span style=&#34;color: #a6e22e&#34;&gt;Key&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;key&lt;/span&gt;
         &lt;span style=&#34;color: #f8f8f2&#34;&gt;},&lt;/span&gt;
         &lt;span style=&#34;color: #a6e22e&#34;&gt;PipelineId&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;[USE YOUR PIPELINE ID]&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; 
         &lt;span style=&#34;color: #a6e22e&#34;&gt;OutputKeyPrefix&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;[OUT PUT KEY PREFIX ex. `iphone/`]&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt;
         &lt;span style=&#34;color: #a6e22e&#34;&gt;Outputs&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;[&lt;/span&gt;
           &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
             &lt;span style=&#34;color: #a6e22e&#34;&gt;SegmentDuration&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;10.0&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt;    
             &lt;span style=&#34;color: #a6e22e&#34;&gt;Key&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;getFileName&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;key&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;),&lt;/span&gt;
             &lt;span style=&#34;color: #a6e22e&#34;&gt;PresetId&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;[PRESETID ex `1351620000001-200060`]&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #75715e&#34;&gt;// hls&lt;/span&gt;
           &lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
         &lt;span style=&#34;color: #f8f8f2&#34;&gt;]&lt;/span&gt;
       &lt;span style=&#34;color: #f8f8f2&#34;&gt;};&lt;/span&gt;
   
       &lt;span style=&#34;color: #a6e22e&#34;&gt;elastictranscoder&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;createJob&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;params&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;function&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;err&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;data&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
         &lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;err&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;){&lt;/span&gt;
           &lt;span style=&#34;color: #a6e22e&#34;&gt;console&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;log&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;err&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;err&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;stack&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt; &lt;span style=&#34;color: #75715e&#34;&gt;// an error occurred&lt;/span&gt;
           &lt;span style=&#34;color: #a6e22e&#34;&gt;context&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;fail&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;();&lt;/span&gt;
           &lt;span style=&#34;color: #66d9ef&#34;&gt;return&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;
         &lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
         &lt;span style=&#34;color: #a6e22e&#34;&gt;context&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;succeed&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;();&lt;/span&gt;
       &lt;span style=&#34;color: #f8f8f2&#34;&gt;});&lt;/span&gt;
   &lt;span style=&#34;color: #f8f8f2&#34;&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Under the section &lt;code&gt;Lambda function handler and role&lt;/code&gt; create new role based on &amp;lsquo;s3 execution role&amp;rsquo; to let lambda write
into s3 bucket.&lt;/p&gt;

&lt;p&gt;You are almost done. Update the &lt;em&gt;PipelineId&lt;/em&gt;, &lt;em&gt;OutputKeyPrefix&lt;/em&gt;, and &lt;em&gt;PresetId&lt;/em&gt; with your data and click next.
In the Review section, you just need to Enable the event source and click on the create function button.&lt;/p&gt;

&lt;p&gt;Congratulations!! Now you have a serverless media transcoder system. Whenever you upload a file to your input bucket, it raises an
event which is handled by Lambda function. Lambda handler adds a new job by using the given presets in the pipeline and whenever it is finished,
the new format of data is available at the output bucket.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>